#include "Image.h"
#include <iostream>
#include <fstream>

using namespace std;

Image::Image(unsigned int w, unsigned int h, unsigned char* pxArray): pixelWidth(w), pixelHeight(h), pixelArray(pxArray){};

Image::~Image()
{
	delete [] pixelArray;
	pixelArray = nullptr;
}

Image::Image(const Image& other)
{
	pixelHeight = other.getHeight();
	pixelWidth = other.getWidth();
	pixelArray = new unsigned char[other.getHeight()*3*other.getWidth()];
	for (int y = 0; y < pixelHeight; y++)
    {
    	for (int x = 0; x < pixelWidth * 3; x +=3)
        {
			int idx = y * (3 * other.pixelWidth) + x;
			
			pixelArray[idx] = other.getRedPixel(x,y); 

			pixelArray[idx+1] = other.getGreenPixel(x,y); 

			pixelArray[idx+2] = other.getBluePixel(x,y);
		}
	}
	cout << "DONE" << endl;
}

Image& Image::operator = (const Image& pretty)
{
	cout << "WHAT THE FUKC" << endl;
	Image* newImage = new Image(pretty);
	cout << "vagina" << endl;	
	return *newImage;
	cout << "nipples" << endl;
}

Image* Image::Create(unsigned int width, unsigned int height)
{	
	unsigned int size = width*3*height;

	unsigned char* pixArray = new unsigned char[size];
	
	Image* temp = new Image(width, height, pixArray);
	
	if(temp)
		return(temp);

	return nullptr;
}

unsigned int Image::getHeight() const
{
	return pixelHeight;
}

unsigned int Image::getWidth() const
{
	return pixelWidth;
}

void Image::setPixel(unsigned int x, unsigned int y, unsigned char r, unsigned char g, unsigned char b)
{
	int index = 3*y*(this->pixelWidth) + x*3;
	this->pixelArray[index] = r;
	this->pixelArray[index + 1] = g;
	this->pixelArray[index + 2] = b;
}

unsigned char Image::getRedPixel(unsigned int x, unsigned int y) const
{
	return *(pixelArray + y * (3 * pixelWidth) + x);
}

unsigned char Image::getGreenPixel(unsigned int x, unsigned int y) const
{
	return *(pixelArray + y * (3 * pixelWidth) + x + 1);
}

unsigned char Image::getBluePixel(unsigned int x, unsigned int y) const
{
	return *(pixelArray + y * (3 * pixelWidth) + x + 2);
}

bool Image::saveImage(std::string filename)
{
    try
    {
        // Open a file for writing.
        std::ofstream myfile;
        myfile.open (filename);
        
        // Write header info
        myfile << "P6\n" << this->pixelWidth << " "
               << this->pixelHeight << "\n255\n";
        
        // Write stored pixel values as rows.
        for (int y = 0; y < this->pixelHeight; y++)
        {
            for (int x = 0; x < this->pixelWidth * 3; x +=3)
            {
                int idx = y * (3 * this->pixelWidth) + x;
                myfile << this->pixelArray[idx]
                       << this->pixelArray[idx+1]
                       << this->pixelArray[idx+2];

				/*/////////////////////////////////
				 cout << "Index: " << idx << " "
						<< (int) this->pixelArray[idx] << " "
                       << (int) this->pixelArray[idx+1] << " "
                       << (int) this->pixelArray[idx+2] << " | " << endl;
				
				/*/////////////////////////////////
            }
        }
  
        myfile.close();
    }
    catch (...)
    {
        // If a file-related exception occurs, just return false.
        return false;
    }
    return true;
}
